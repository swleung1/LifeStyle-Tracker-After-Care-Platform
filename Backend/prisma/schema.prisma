generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  patient
  doctor
}

enum Urgency {
  low
  medium
  high
}

enum Risk {
  ok
  watch
  urgent
}
enum AppointmentStatus {
  scheduled
  completed
  canceled
  no_show
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String
  role         Role      @default(patient)
  createdAt    DateTime  @default(now())
  patient      Patient?
  doctorPatients DoctorPatient[] @relation("DoctorPatients_doctor")
  appointmentsAsDoctor Appointment[] @relation("DoctorAppointments_doctor")
  appointmentsAsPatient Appointment[] @relation("PatientAppointments_patient")
  Patients Patient[] @relation("PrimaryDoctor")
}

model Patient {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  condition String?
  doctor    User?    @relation("PrimaryDoctor", fields: [primaryDoctorId], references: [id])
  primaryDoctorId Int?
  carePlans CarePlan[]
  surveys   Survey[]
  links     DoctorPatient[] @relation("DoctorPatients_patient")
  @@index([primaryDoctorId])
}

model DoctorPatient {
  id        Int    @id @default(autoincrement())
  doctorId  Int
  patientId Int
  doctor    User    @relation("DoctorPatients_doctor", fields: [doctorId], references: [id], onDelete: Cascade)
  patient   Patient @relation("DoctorPatients_patient", fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([doctorId, patientId])
}

model CarePlan {
  id         Int           @id @default(autoincrement())
  patientId  Int
  title      String
  active     Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  patient    Patient       @relation(fields: [patientId], references: [id])
  instructions Instruction[]
  @@index([patientId, active])
}

model Instruction {
  id           Int      @id @default(autoincrement())
  carePlanId   Int
  title        String
  description  String
  urgency      Urgency
  orderIndex   Int       @default(0)
  carePlan     CarePlan  @relation(fields: [carePlanId], references: [id], onDelete: Cascade)
}

model Survey {
  id          Int       @id @default(autoincrement())
  patientId   Int
  submittedAt DateTime  @default(now())
  risk        Risk
  responses   Json
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId, submittedAt])
 
}

model Appointment {
  id          Int      @id @default(autoincrement())
  doctorId    Int
  patientId   Int
  startAt     DateTime
  link        String?
  notes       String?
  doctor      User     @relation("DoctorAppointments_doctor", fields: [doctorId], references: [id])
  patient     User    @relation("PatientAppointments_patient", fields: [patientId], references: [id])
  status AppointmentStatus @default(scheduled)

  @@index([doctorId, startAt])
}
